[mock_info]
#1 : server
#2 : client
mode=1
BUFFERSIZE=1024000


[mock_server]
#如果mode是server，则server的配置项
listen_port=9000
#收到请求后的处理时间，模拟链接的timeout场景，单位秒
handle_time=0
response_value={"version":1,"rdr":1,"errno_xx":0,"clickid":"0f0c5990e86a1365ffffffff8831645f","rule_ret":"0,0,0","pass_ret":"1,1,1","extend_item":""}


[mock_client]
#如果mode是client，则client的配置项
server_ip=10.10.120.231
server_port=9002
request_value={}

[out_put]
log_file_path='log/'

#返回值 1是返回的dict数组 2是pickle的对象序列化
show_proto_buf_info_style=1

dump_file_path = 'output/'
send_dump_file = 'send.pickle'
recv_dump_file = 'recv.pickle'


[socket_conf]
#1 : protobuf
#2 : raw_socket
body_type=1

#0 : 没有报头
#1 : X-server
#2 : user-defined struct
header=0

#1 : 报头和报体分开发送
#2 : 报头和报体一起发送
send_type=2

#1 : tcp
#2 : udp
socket_type=2

#设置server阻塞监听的时间
timeout=60

#True :  server循环等待
#False : server在接受一次client请求后就退出
server_loop=False


[proto_buf]
#如果body_type是1 则使用哪个proto_buf文件
proto_buf=anticheat.proto
#指定发送的message
proto_request=AntiSendInfo
#指定接收的message
proto_response=AntiResultInfo

#输出发送的proto
output_req_list=True
#输出接收的proto
output_res_list=True

